// Generated by CoffeeScript 1.9.2
(function() {
  var Fixture,
    slice = [].slice;

  Fixture = (function() {
    function Fixture(base, id) {
      this.base = base != null ? base : 'spec/fixtures';
      this.id = id != null ? id : 'fixture_container';
      this.json = [];
      this.scriptTypes = {
        'application/ecmascript': 1,
        'application/javascript': 1,
        'application/x-ecmascript': 1,
        'application/x-javascript': 1,
        'text/ecmascript': 1,
        'text/javascript': 1,
        'text/javascript1.0': 1,
        'text/javascript1.1': 1,
        'text/javascript1.2': 1,
        'text/javascript1.3': 1,
        'text/javascript1.4': 1,
        'text/javascript1.5': 1,
        'text/jscript': 1,
        'text/livescript': 1,
        'text/x-ecmascript': 1,
        'text/x-javascript': 1
      };
      this.el = window[this.id] || ((function(_this) {
        return function() {
          var container;
          container = document.createElement('div');
          container.setAttribute('id', _this.id);
          return document.body.appendChild(container);
        };
      })(this))();
    }

    Fixture.prototype.load = function() {
      var __html__, __json__, append, filename, filenames, fixture_path, ignore, j, json, k, len, results;
      filenames = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), append = arguments[j++];
      if (append == null) {
        append = false;
      }
      __html__ = window.__html__ || {};
      __json__ = window.__json__ || {};
      if (typeof append !== 'boolean') {
        filenames.push(append);
        append = false;
      }
      if (append === false) {
        this.cleanup();
      }
      results = [];
      for (k = 0, len = filenames.length; k < len; k++) {
        filename = filenames[k];
        if (filename[0] === '/') {
          fixture_path = filename.substr(1);
        } else {
          fixture_path = this.base + "/" + filename;
        }
        if (filename.indexOf('.json') !== -1) {
          json = __json__[filename.replace('.json', '')] || __json__[filename] || __json__[fixture_path] || __json__[this.base + "/" + (filename.replace('.json', ''))];
          if (json == null) {
            this._throwNoFixture(fixture_path);
          }
          try {
            json = JSON.parse(JSON.stringify(json));
          } catch (_error) {
            ignore = _error;
          }
          this.json.push(json);
          results.push(json);
        } else if (__html__[fixture_path]) {
          results.push(this._appendFixture(__html__[fixture_path]));
        } else {
          if (typeof string === "undefined" || string === null) {
            this._throwNoFixture(fixture_path);
          }
        }
      }
      if (results.length === 1) {
        results = results[0];
      }
      return results;
    };

    Fixture.prototype.set = function() {
      var append, j, k, len, results, string, strings;
      strings = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), append = arguments[j++];
      if (append == null) {
        append = false;
      }
      if (typeof append !== 'boolean') {
        strings.push(append);
        append = false;
      }
      if (append === false) {
        this.cleanup();
      }
      results = [];
      for (k = 0, len = strings.length; k < len; k++) {
        string = strings[k];
        results.push(this._appendFixture(string));
      }
      if (results.length === 1) {
        results = results[0];
      }
      return results;
    };

    Fixture.prototype.cleanup = function() {
      this.json = [];
      return this.el.innerHTML = '';
    };

    Fixture.prototype.setBase = function(base) {
      this.base = base;
    };

    Fixture.prototype._appendFixture = function(html_string) {
      var i, results, temp_div;
      temp_div = document.createElement('div');
      temp_div.innerHTML = html_string;
      results = [];
      while (i = temp_div.firstChild) {
        if (i.nodeType !== 1) {
          temp_div.removeChild(i);
        } else {
          this.el.appendChild(i);
          results.push(i);
          if (i.nodeName === 'SCRIPT' && (!i.type || this.scriptTypes[i.type])) {
            eval(i.innerText || i.textContent);
          }
        }
      }
      return results;
    };

    Fixture.prototype._throwNoFixture = function(fixture_path) {
      throw new ReferenceError("Cannot find fixture '" + fixture_path + "'");
    };

    return Fixture;

  })();

  if (typeof exports === 'object') {
    module.exports = Fixture;
  } else if (typeof define === 'function' && define.amd) {
    define('fixture', [], function() {
      return Fixture;
    });
  } else {
    this['Fixture'] = Fixture;
  }

}).call(this);
